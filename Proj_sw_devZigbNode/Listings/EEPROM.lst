C51 COMPILER V9.54   EEPROM                                                                09/21/2018 11:10:01 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Output\EEPROM.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE std_Lib\EEPROM.c OMF2 ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Usr
                    -;.\Usr_lib;.\std_Lib;.\dataTrans;.\Actuator;.\Sensor;.\hwDriver) DEBUG PRINT(.\Listings\EEPROM.lst) OBJECT(.\Output\EEPR
                    -OM.obj)

line level    source

   1          
   2          //      本程序是STC系列的内置EEPROM读写程序。
   3          
   4          #include "config.h"
   5          #include "eeprom.h"
   6          #include "string.h"
   7          
   8          #include "dataManage.h"
   9          
  10          //========================================================================
  11          // 函数: void   ISP_Disable(void)
  12          // 描述: 禁止访问ISP/IAP.
  13          // 参数: non.
  14          // 返回: non.
  15          // 版本: V1.0, 2012-10-22
  16          //========================================================================
  17          void DisableEEPROM(void)
  18          {
  19   1              ISP_CONTR = 0;                  //禁止ISP/IAP操作
  20   1              ISP_CMD   = 0;                  //去除ISP/IAP命令
  21   1              ISP_TRIG  = 0;                  //防止ISP/IAP命令误触发
  22   1              ISP_ADDRH = 0xff;               //清0地址高字节
  23   1              ISP_ADDRL = 0xff;               //清0地址低字节，指向非EEPROM区，防止误操作
  24   1      }
  25          
  26          //========================================================================
  27          // 函数: void EEPROM_read_n(u16 EE_address,u8 *DataAddress,u16 number)
  28          // 描述: 从指定EEPROM首地址读出n个字节放指定的缓冲.
  29          // 参数: EE_address:  读出EEPROM的首地址.
  30          //       DataAddress: 读出数据放缓冲的首地址.
  31          //       number:      读出的字节长度.
  32          // 返回: non.
  33          // 版本: V1.0, 2012-10-22
  34          //========================================================================
  35          
  36          void EEPROM_read_n(u16 EE_address,u8 *DataAddress,u16 number)
  37          {
  38   1              EA = 0;         //禁止中断
  39   1              ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);      //设置等待时间，允许ISP/IAP操作，送一次就够
  40   1              ISP_READ();                                                                     //送字节读命令，命令不需改变时，不需重新送命令
  41   1              do
  42   1              {
  43   2                      ISP_ADDRH = EE_address / 256;           //送地址高字节（地址需要改变时才需重新送地址）
  44   2                      ISP_ADDRL = EE_address % 256;           //送地址低字节
  45   2                      ISP_TRIG();                                                     //先送5AH，再送A5H到ISP/IAP触发寄存器，每次都需要如此
  46   2                                                                                              //送完A5H后，ISP/IAP命令立即被触发启动
  47   2                                                                                              //CPU等待IAP完成后，才会继续执行程序。
  48   2                      _nop_();
  49   2                      *DataAddress = ISP_DATA;                        //读出的数据送往
  50   2                      EE_address++;
  51   2                      DataAddress++;
  52   2              }while(--number);
  53   1      
C51 COMPILER V9.54   EEPROM                                                                09/21/2018 11:10:01 PAGE 2   

  54   1              DisableEEPROM();
  55   1              EA = 1;         //重新允许中断
  56   1      }
  57          
  58          
  59          /******************** 扇区擦除函数 *****************/
  60          //========================================================================
  61          // 函数: void EEPROM_SectorErase(u16 EE_address)
  62          // 描述: 把指定地址的EEPROM扇区擦除.
  63          // 参数: EE_address:  要擦除的扇区EEPROM的地址.
  64          // 返回: non.
  65          // 版本: V1.0, 2013-5-10
  66          //========================================================================
  67          void EEPROM_SectorErase(u16 EE_address)
  68          {
  69   1              EA = 0;         //禁止中断
  70   1                                                                                              //只有扇区擦除，没有字节擦除，512字节/扇区。
  71   1                                                                                              //扇区中任意一个字节地址都是扇区地址。
  72   1              ISP_ADDRH = EE_address / 256;                   //送扇区地址高字节（地址需要改变时才需重新送地址）
  73   1              ISP_ADDRL = EE_address % 256;                   //送扇区地址低字节
  74   1              ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);      //设置等待时间，允许ISP/IAP操作，送一次就够
  75   1              ISP_ERASE();                                                    //送扇区擦除命令，命令不需改变时，不需重新送命令
  76   1              ISP_TRIG();
  77   1              _nop_();
  78   1              DisableEEPROM();
  79   1              EA = 1;         //重新允许中断
  80   1      }
  81          
  82          //========================================================================
  83          // 函数: void EEPROM_write_n(u16 EE_address,u8 *DataAddress,u16 number)
  84          // 描述: 把缓冲的n个字节写入指定首地址的EEPROM.
  85          // 参数: EE_address:  写入EEPROM的首地址.
  86          //       DataAddress: 写入源数据的缓冲的首地址.
  87          //       number:      写入的字节长度.
  88          // 返回: non.
  89          // 版本: V1.0, 2012-10-22
  90          //========================================================================
  91          void EEPROM_write_n(u16 EE_address,u8 *DataAddress,u16 number)
  92          {
  93   1              EA = 0;         //禁止中断
  94   1      
  95   1              ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);      //设置等待时间，允许ISP/IAP操作，送一次就够
  96   1              ISP_WRITE();                                                    //送字节写命令，命令不需改变时，不需重新送命令
  97   1              do
  98   1              {
  99   2                      ISP_ADDRH = EE_address / 256;           //送地址高字节（地址需要改变时才需重新送地址）
 100   2                      ISP_ADDRL = EE_address % 256;           //送地址低字节
 101   2                      ISP_DATA  = *DataAddress;                       //送数据到ISP_DATA，只有数据改变时才需重新送
 102   2                      ISP_TRIG();
 103   2                      _nop_();
 104   2                      EE_address++;
 105   2                      DataAddress++;
 106   2              }while(--number);
 107   1      
 108   1              DisableEEPROM();
 109   1              EA = 1;         //重新允许中断
 110   1      }
 111          
 112          
 113          //========================================================================
 114          // 函数: void coverEEPROM_write_n(u16 EE_address,u8 *DataAddress,u16 number)
 115          // 描述: 把缓冲的n个字节写入指定首地址的EEPROM-----数据覆盖形式写入！！！！！！！！！
C51 COMPILER V9.54   EEPROM                                                                09/21/2018 11:10:01 PAGE 3   

 116          // 参数: EE_address:  写入EEPROM的首地址.
 117          //       DataAddress: 写入源数据的缓冲的首地址.
 118          //       number:      写入的字节长度.
 119          // 返回: non.
 120          // 版本: V1.0, 2012-10-22
 121          //========================================================================
 122          void coverEEPROM_write_n(u16 EE_address,u8 *DataAddress,u16 number){    //仅限第一扇区写入操作！！！ 一个扇区
             -就够用了
 123   1              
 124   1              u8  xdata datsTemp[EEPROM_USE_OF_NUMBER] = {0};
 125   1              
 126   1              EEPROM_read_n(EEPROM_ADDR_START, &datsTemp[0], EEPROM_USE_OF_NUMBER);   //缓存暂存
 127   1              EEPROM_SectorErase(EEPROM_ADDR_START);  //擦扇区
 128   1              
 129   1              memcpy(&datsTemp[EE_address], DataAddress, number);     //数据覆盖
 130   1              
 131   1              EEPROM_write_n(EEPROM_ADDR_START, &datsTemp[0], EEPROM_USE_OF_NUMBER);  //数据重新存入
 132   1      }
 133          
 134          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    264    ----
   CONSTANT SIZE    =    128    ----
   XDATA SIZE       =   ----     128
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
